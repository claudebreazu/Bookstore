
/** Claude Breazu
 *      100860542
 *      Bookstore Application
 *      COMP3005
 *      April 2020
 */
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;

public class TheMainForm extends javax.swing.JFrame {

    private final String url = "jdbc:postgresql://localhost:5432/Bookstore_02";
    private final String user = "postgres";
    private final String password = "YOUR_PASSWORD_HERE";

    public TheMainForm() {

        //initialize components
        //this code is auto-generated by IDE and used to create the GUI
        initComponents();

        // Allow only Single Selection on all the tables
        jTable_AllBooksInWarehouse.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable_AllOrders.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable_Basket.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable_AvailableBooks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        //hide the "Update Book" button
        jButton_UpdateBook.setVisible(false);

        //load users
        loadUsers(jComboBox_UserList);

        //load everything else
        loadEverything();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor. This method includes lines 56-900.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu_AllBooks = new javax.swing.JPopupMenu();
        jMenuItem_DeleteBook = new javax.swing.JMenuItem();
        jMenuItem_UpdateBook = new javax.swing.JMenuItem();
        jPopupMenu_Order = new javax.swing.JPopupMenu();
        jMenuItem_ShipOrder = new javax.swing.JMenuItem();
        jMenuItem_PayPublisher = new javax.swing.JMenuItem();
        jPopupMenu_Basket = new javax.swing.JPopupMenu();
        jMenuItem_RemoveFromBasket = new javax.swing.JMenuItem();
        jPopupMenu_AvailableBooks = new javax.swing.JPopupMenu();
        jMenuItem_AddToBasket = new javax.swing.JMenuItem();
        buttonGroup_AddressType = new javax.swing.ButtonGroup();
        jPopupMenu_UserOrders = new javax.swing.JPopupMenu();
        jMenuItem_Received = new javax.swing.JMenuItem();
        jTabbedPane_Reports = new javax.swing.JTabbedPane();
        jPanel_Warehouse = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_AllBooksInWarehouse = new javax.swing.JTable();
        jPanel_AddNewBook = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField_BookName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField_BookAuthor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField_BookGenre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField_BookISBN = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton_AddBook = new javax.swing.JButton();
        jCheckBox_BookRetiredYN = new javax.swing.JCheckBox();
        jFormattedTextField_BookPrice = new javax.swing.JFormattedTextField();
        jFormattedTextField_NoOfPages = new javax.swing.JFormattedTextField();
        jFormattedTextField_BookQuantity = new javax.swing.JFormattedTextField();
        jTextField_BookPublisher = new javax.swing.JTextField();
        jFormattedTextField_BookPublisherShare = new javax.swing.JFormattedTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextField_BookID = new javax.swing.JTextField();
        jButton_UpdateBook = new javax.swing.JButton();
        jPanel_Orders2 = new javax.swing.JPanel();
        jTextField_OrderSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_AllOrders = new javax.swing.JTable();
        jButton_OrderSearch = new javax.swing.JButton();
        jComboBox_OrderSearchCriteria = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        jButton_SearchOrderReset = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jPanel_User = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jButton_UserSearchOnMany = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_AvailableBooks = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jPanel_UserBasket = new javax.swing.JPanel();
        jLabel_UserList = new javax.swing.JLabel();
        jComboBox_UserList = new javax.swing.JComboBox<UserUnit>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable_Basket = new javax.swing.JTable();
        jButton_EmptyBasket = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jCheckBox_UseRegistrationAddress = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        jTextField_Street = new javax.swing.JTextField();
        jButton_CheckOut = new javax.swing.JButton();
        jTextField_City = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField_PostalCode = new javax.swing.JTextField();
        jTextField_Province = new javax.swing.JTextField();
        jTextField_SearchBookByManyTokens = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable_UserOrders = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jPanel_Publisher = new javax.swing.JPanel();
        jScrollPane_Publisher = new javax.swing.JScrollPane();
        jTable_Publisher = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable_Reports = new javax.swing.JTable();
        jButton_expenditure = new javax.swing.JButton();
        jButton_authorSale = new javax.swing.JButton();
        jButton_genreSale = new javax.swing.JButton();

        jMenuItem_DeleteBook.setText("Delete Book");
        jMenuItem_DeleteBook.setToolTipText("Delete book from warehouse");
        jMenuItem_DeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_DeleteBookActionPerformed(evt);
            }
        });
        jPopupMenu_AllBooks.add(jMenuItem_DeleteBook);

        jMenuItem_UpdateBook.setText("Update Book");
        jMenuItem_UpdateBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_UpdateBookActionPerformed(evt);
            }
        });
        jPopupMenu_AllBooks.add(jMenuItem_UpdateBook);

        jMenuItem_ShipOrder.setText("Ship this Order");
        jMenuItem_ShipOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ShipOrderActionPerformed(evt);
            }
        });
        jPopupMenu_Order.add(jMenuItem_ShipOrder);

        jMenuItem_PayPublisher.setText("Pay Publisher");
        jMenuItem_PayPublisher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_PayPublisherActionPerformed(evt);
            }
        });
        jPopupMenu_Order.add(jMenuItem_PayPublisher);

        jPopupMenu_Basket.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPopupMenu_BasketMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPopupMenu_BasketMouseReleased(evt);
            }
        });

        jMenuItem_RemoveFromBasket.setText("jMenuItem1");
        jPopupMenu_Basket.add(jMenuItem_RemoveFromBasket);

        jMenuItem_AddToBasket.setText("Add to Basket");
        jMenuItem_AddToBasket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_AddToBasketActionPerformed(evt);
            }
        });
        jPopupMenu_AvailableBooks.add(jMenuItem_AddToBasket);

        jMenuItem_Received.setText("Received");
        jMenuItem_Received.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ReceivedActionPerformed(evt);
            }
        });
        jPopupMenu_UserOrders.add(jMenuItem_Received);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane_Reports.setBackground(new java.awt.Color(51, 51, 51));
        jTabbedPane_Reports.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTabbedPane_ReportsFocusGained(evt);
            }
        });

        jTable_AllBooksInWarehouse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_AllBooksInWarehouse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable_AllBooksInWarehouseMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable_AllBooksInWarehouseMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_AllBooksInWarehouse);

        jPanel_AddNewBook.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Add Book to Bookstore"));

        jLabel1.setText("Book Name");

        jLabel2.setText("Author");

        jTextField_BookAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_BookAuthorActionPerformed(evt);
            }
        });

        jLabel3.setText("Genre");

        jLabel4.setText("ISBN");

        jLabel5.setText("Price");

        jLabel6.setText("# of Pages");

        jLabel7.setText("Publisher");

        jLabel8.setText("Quantity");

        jLabel9.setText("Publisher Share");

        jLabel10.setText("Retired from Sale");

        jButton_AddBook.setText("Add Book");
        jButton_AddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddBookActionPerformed(evt);
            }
        });

        jFormattedTextField_BookPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        jFormattedTextField_NoOfPages.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jFormattedTextField_BookQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextField_BookQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextField_BookQuantityActionPerformed(evt);
            }
        });

        jFormattedTextField_BookPublisherShare.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextField_BookPublisherShare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextField_BookPublisherShareActionPerformed(evt);
            }
        });

        jLabel17.setText("Book ID");

        jTextField_BookID.setEnabled(false);

        jButton_UpdateBook.setText("Update Book");
        jButton_UpdateBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_UpdateBookMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel_AddNewBookLayout = new javax.swing.GroupLayout(jPanel_AddNewBook);
        jPanel_AddNewBook.setLayout(jPanel_AddNewBookLayout);
        jPanel_AddNewBookLayout.setHorizontalGroup(
            jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_AddNewBookLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_AddNewBookLayout.createSequentialGroup()
                        .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(3, 3, 3))
                    .addGroup(jPanel_AddNewBookLayout.createSequentialGroup()
                        .addComponent(jButton_AddBook)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jFormattedTextField_BookQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField_BookPublisherShare, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox_BookRetiredYN)
                    .addComponent(jTextField_BookID, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_BookISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField_BookPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField_NoOfPages, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_UpdateBook, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_BookGenre, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                    .addComponent(jTextField_BookAuthor)
                    .addComponent(jTextField_BookName)
                    .addComponent(jTextField_BookPublisher))
                .addContainerGap())
        );
        jPanel_AddNewBookLayout.setVerticalGroup(
            jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_AddNewBookLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextField_BookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_BookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(jTextField_BookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(jTextField_BookGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(jTextField_BookISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jFormattedTextField_BookPrice)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jFormattedTextField_NoOfPages, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jTextField_BookPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextField_BookQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jFormattedTextField_BookPublisherShare, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jCheckBox_BookRetiredYN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_AddNewBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_AddBook)
                    .addComponent(jButton_UpdateBook))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        jPanel_Orders2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Orders")));

        jTable_AllOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_AllOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable_AllOrdersMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable_AllOrdersMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_AllOrders);

        jButton_OrderSearch.setText("Search");
        jButton_OrderSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_OrderSearchMouseClicked(evt);
            }
        });

        jComboBox_OrderSearchCriteria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  "Tracking Number", "Customer Name", "Order ID", "Order Status"}));

        jLabel22.setLabelFor(jComboBox_OrderSearchCriteria);
        jLabel22.setText("Search criterion");

        jButton_SearchOrderReset.setText("Reset");
        jButton_SearchOrderReset.setToolTipText("Resets the Order Search criterion");
        jButton_SearchOrderReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_SearchOrderResetMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel_Orders2Layout = new javax.swing.GroupLayout(jPanel_Orders2);
        jPanel_Orders2.setLayout(jPanel_Orders2Layout);
        jPanel_Orders2Layout.setHorizontalGroup(
            jPanel_Orders2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Orders2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_Orders2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_Orders2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1003, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel_Orders2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel22)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox_OrderSearchCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jTextField_OrderSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_OrderSearch)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_SearchOrderReset)
                        .addGap(15, 300, Short.MAX_VALUE))))
        );
        jPanel_Orders2Layout.setVerticalGroup(
            jPanel_Orders2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Orders2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel_Orders2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_OrderSearchCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_OrderSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_OrderSearch)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_SearchOrderReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel20.setText("All Books in the warehouse");

        javax.swing.GroupLayout jPanel_WarehouseLayout = new javax.swing.GroupLayout(jPanel_Warehouse);
        jPanel_Warehouse.setLayout(jPanel_WarehouseLayout);
        jPanel_WarehouseLayout.setHorizontalGroup(
            jPanel_WarehouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_WarehouseLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(553, 553, 553))
            .addGroup(jPanel_WarehouseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1304, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel_WarehouseLayout.createSequentialGroup()
                .addComponent(jPanel_AddNewBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_Orders2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel_WarehouseLayout.setVerticalGroup(
            jPanel_WarehouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_WarehouseLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_WarehouseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel_Orders2, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel_AddNewBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(169, 169, 169))
        );

        jTabbedPane_Reports.addTab("Warehouse", jPanel_Warehouse);

        jPanel_User.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel_User.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel_UserMousePressed(evt);
            }
        });

        jLabel11.setText("Search by Name, Author, Publisher or Genre");

        jButton_UserSearchOnMany.setText("Search");
        jButton_UserSearchOnMany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_UserSearchOnManyActionPerformed(evt);
            }
        });

        jTable_AvailableBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_AvailableBooks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable_AvailableBooksMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable_AvailableBooksMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTable_AvailableBooks);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jPanel_UserBasket.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Users's Basket"));

        jLabel_UserList.setText("Current User");

        jComboBox_UserList.setModel(new javax.swing.DefaultComboBoxModel<UserUnit>());
        jComboBox_UserList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_UserListItemStateChanged(evt);
            }
        });
        jComboBox_UserList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_UserListActionPerformed(evt);
            }
        });

        jTable_Basket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable_Basket);

        jButton_EmptyBasket.setText("Empty Basket");
        jButton_EmptyBasket.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_EmptyBasketMouseClicked(evt);
            }
        });
        jButton_EmptyBasket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EmptyBasketActionPerformed(evt);
            }
        });

        jLabel12.setText("Provide the shiping address    OR");

        jCheckBox_UseRegistrationAddress.setText("Use the registration address");
        jCheckBox_UseRegistrationAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_UseRegistrationAddressActionPerformed(evt);
            }
        });

        jLabel13.setText("Street");

        jButton_CheckOut.setText("Check Out");
        jButton_CheckOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_CheckOutMouseClicked(evt);
            }
        });
        jButton_CheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CheckOutActionPerformed(evt);
            }
        });

        jLabel15.setText("Province");

        jLabel14.setText("City");

        jLabel16.setText("Postal Code");

        javax.swing.GroupLayout jPanel_UserBasketLayout = new javax.swing.GroupLayout(jPanel_UserBasket);
        jPanel_UserBasket.setLayout(jPanel_UserBasketLayout);
        jPanel_UserBasketLayout.setHorizontalGroup(
            jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_UserBasketLayout.createSequentialGroup()
                .addGroup(jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel_UserBasketLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE))
                    .addGroup(jPanel_UserBasketLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel_UserList, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jComboBox_UserList, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_EmptyBasket)))
                .addContainerGap())
            .addGroup(jPanel_UserBasketLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel_UserBasketLayout.createSequentialGroup()
                            .addGroup(jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField_Street, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField_City, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(40, 40, 40)
                            .addComponent(jButton_CheckOut))
                        .addGroup(jPanel_UserBasketLayout.createSequentialGroup()
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jTextField_Province, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel_UserBasketLayout.createSequentialGroup()
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jTextField_PostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel_UserBasketLayout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox_UseRegistrationAddress)
                        .addGap(37, 37, 37)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_UserBasketLayout.setVerticalGroup(
            jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_UserBasketLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_UserList)
                    .addGroup(jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox_UserList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_EmptyBasket)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox_UseRegistrationAddress))
                .addGap(10, 10, 10)
                .addGroup(jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_UserBasketLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(14, 14, 14)
                        .addComponent(jLabel14))
                    .addGroup(jPanel_UserBasketLayout.createSequentialGroup()
                        .addComponent(jTextField_Street, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jTextField_City, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton_CheckOut))
                .addGap(6, 6, 6)
                .addGroup(jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jTextField_Province, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel_UserBasketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_PostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        jTextField_SearchBookByManyTokens.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_SearchBookByManyTokensKeyPressed(evt);
            }
        });

        jTable_UserOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_UserOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable_UserOrdersMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable_UserOrdersMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(jTable_UserOrders);

        jLabel18.setText("User's Orders");

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setText("Avalable Books to select from");

        javax.swing.GroupLayout jPanel_UserLayout = new javax.swing.GroupLayout(jPanel_User);
        jPanel_User.setLayout(jPanel_UserLayout);
        jPanel_UserLayout.setHorizontalGroup(
            jPanel_UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_UserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_UserLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_UserLayout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())
                    .addGroup(jPanel_UserLayout.createSequentialGroup()
                        .addGroup(jPanel_UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_UserLayout.createSequentialGroup()
                                .addComponent(jPanel_UserBasket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel_UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5)
                                    .addGroup(jPanel_UserLayout.createSequentialGroup()
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel_UserLayout.createSequentialGroup()
                                .addGroup(jPanel_UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel_UserLayout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(jTextField_SearchBookByManyTokens, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(jButton_UserSearchOnMany)
                                        .addGap(102, 102, 102)
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 94, Short.MAX_VALUE)))
                        .addGap(6, 6, 6))))
        );
        jPanel_UserLayout.setVerticalGroup(
            jPanel_UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_UserLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel11)
                .addGroup(jPanel_UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_UserLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel_UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_UserLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jTextField_SearchBookByManyTokens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton_UserSearchOnMany)))
                    .addGroup(jPanel_UserLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel_UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel_UserBasket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel_UserLayout.createSequentialGroup()
                            .addComponent(jLabel18)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        jTabbedPane_Reports.addTab("User", jPanel_User);

        jTable_Publisher.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane_Publisher.setViewportView(jTable_Publisher);

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel21.setText("List of Publishers");

        javax.swing.GroupLayout jPanel_PublisherLayout = new javax.swing.GroupLayout(jPanel_Publisher);
        jPanel_Publisher.setLayout(jPanel_PublisherLayout);
        jPanel_PublisherLayout.setHorizontalGroup(
            jPanel_PublisherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_PublisherLayout.createSequentialGroup()
                .addContainerGap(565, Short.MAX_VALUE)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(388, 388, 388))
            .addGroup(jPanel_PublisherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel_PublisherLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane_Publisher, javax.swing.GroupLayout.DEFAULT_SIZE, 1304, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel_PublisherLayout.setVerticalGroup(
            jPanel_PublisherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_PublisherLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(746, Short.MAX_VALUE))
            .addGroup(jPanel_PublisherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel_PublisherLayout.createSequentialGroup()
                    .addGap(69, 69, 69)
                    .addComponent(jScrollPane_Publisher, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(472, Short.MAX_VALUE)))
        );

        jTabbedPane_Reports.addTab("Publisher", jPanel_Publisher);

        jTable_Reports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(jTable_Reports);

        jButton_expenditure.setText("Expenditure Report");
        jButton_expenditure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_expenditureActionPerformed(evt);
            }
        });

        jButton_authorSale.setText("Author Report");
        jButton_authorSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_authorSaleActionPerformed(evt);
            }
        });

        jButton_genreSale.setText("Genre Report");
        jButton_genreSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_genreSaleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 536, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jButton_expenditure)
                .addGap(96, 96, 96)
                .addComponent(jButton_authorSale, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118)
                .addComponent(jButton_genreSale, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_expenditure)
                    .addComponent(jButton_authorSale)
                    .addComponent(jButton_genreSale))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(332, Short.MAX_VALUE))
        );

        jTabbedPane_Reports.addTab("Reports", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane_Reports)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane_Reports, javax.swing.GroupLayout.PREFERRED_SIZE, 825, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //load users (into combo box)
    private void loadUsers(JComboBox pCmb) {

        //listUsers() SQL function returns user information from database
        String SQL = "SELECT * FROM listUsers ()";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            ResultSet rs = pstmt.executeQuery();

            // add each user into the combo box, setting fields to what is being returned
            while (rs.next()) {
                pCmb.addItem(new UserUnit(rs.getInt("ID"), rs.getString("username"), rs.getBoolean("Registration")));
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    //action handler (update book MENU PRESS)
    private void jMenuItem_UpdateBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_UpdateBookActionPerformed

        //make the update button visible and hide the add button
        jButton_AddBook.setVisible(false);
        jButton_UpdateBook.setVisible(true);

        //get the currently selected row from the model (table)
        DefaultTableModel model = (DefaultTableModel) jTable_AllBooksInWarehouse.getModel();
        int selectedRowIndex = jTable_AllBooksInWarehouse.getSelectedRow();

        //get the book id which is in the first column 
        int theID = (int) model.getValueAt(selectedRowIndex, 0);
        jButton_UpdateBook.setText("Update Book ID:" + theID);

        //auto-fill the textboxes with the books information
        //using model (table) and going column by column 
        jTextField_BookID.setText(String.valueOf(theID));
        jTextField_BookName.setText(model.getValueAt(selectedRowIndex, 1).toString());
        jTextField_BookAuthor.setText(model.getValueAt(selectedRowIndex, 2).toString());
        jTextField_BookISBN.setText(model.getValueAt(selectedRowIndex, 3).toString());
        jFormattedTextField_BookPrice.setText(model.getValueAt(selectedRowIndex, 4).toString());
        jFormattedTextField_NoOfPages.setText(model.getValueAt(selectedRowIndex, 5).toString());
        jTextField_BookGenre.setText(model.getValueAt(selectedRowIndex, 6).toString());
        jTextField_BookPublisher.setText(model.getValueAt(selectedRowIndex, 7).toString());
        jFormattedTextField_BookQuantity.setText(model.getValueAt(selectedRowIndex, 8).toString());
        jFormattedTextField_BookPublisherShare.setText(model.getValueAt(selectedRowIndex, 9).toString());
        jCheckBox_BookRetiredYN.setSelected((boolean) model.getValueAt(selectedRowIndex, 10));

    }//GEN-LAST:event_jMenuItem_UpdateBookActionPerformed

    //action handler (delete book MENU PRESS)
    private void jMenuItem_DeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_DeleteBookActionPerformed

        //make the update button visible and hide the add button
        jButton_AddBook.setVisible(true);
        jButton_UpdateBook.setVisible(false);

        //get the currently selected row from the model (table)        
        DefaultTableModel model = (DefaultTableModel) jTable_AllBooksInWarehouse.getModel();
        int selectedRowIndex = jTable_AllBooksInWarehouse.getSelectedRow();

        //get the book id which is in the first column
        int theID = (int) model.getValueAt(selectedRowIndex, 0);

        //deleteBook() SQL function deletes a book from database
        String SQL = "SELECT * FROM deletebook (?)";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            //set the (?) parameter to the id of the selected book
            //easier than trying to concat multiple strings in the original query
            pstmt.setInt(1, theID);
            ResultSet rs = pstmt.executeQuery();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //refresh the list by reloading from database and clear textfields
        loadEverything();
        clearBookEditingFields();
    }//GEN-LAST:event_jMenuItem_DeleteBookActionPerformed

    //action handler (ship order MENU PRESS)
    private void jMenuItem_ShipOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ShipOrderActionPerformed

        //get the currently selected row from the model (table)        
        DefaultTableModel model = (DefaultTableModel) jTable_AllOrders.getModel();
        int selectedRowIndex = jTable_AllOrders.getSelectedRow();

        //get the order id which is in the first column
        int theID = (int) model.getValueAt(selectedRowIndex, 0);

        //setOrderStatus() SQL function 'ships' the order in database
        String SQL = "SELECT * FROM setOrderStatus (?, ?)";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            //set the (?) parameters, order id and 2=SHIPPED
            pstmt.setInt(1, theID);
            pstmt.setInt(2, 2);

            ResultSet rs = pstmt.executeQuery();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //refresh the list by reloading from database and clear textfields
        loadEverything();
        clearBookEditingFields();
    }//GEN-LAST:event_jMenuItem_ShipOrderActionPerformed

    //action handler (popup)
    private void jPopupMenu_BasketMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPopupMenu_BasketMousePressed
        if (evt.isPopupTrigger()) {
            showPopup_Basket(evt);
        }
    }//GEN-LAST:event_jPopupMenu_BasketMousePressed

    //action handler (popup)
    private void jPopupMenu_BasketMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPopupMenu_BasketMouseReleased
        if (evt.isPopupTrigger()) {
            showPopup_Basket(evt);
        }
    }//GEN-LAST:event_jPopupMenu_BasketMouseReleased

    //action handler (add to basket MENU PRESS)
    private void jMenuItem_AddToBasketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_AddToBasketActionPerformed

        //get the currently selected row from the model (table)        
        DefaultTableModel model = (DefaultTableModel) jTable_AvailableBooks.getModel();
        int selectedRowIndex = jTable_AvailableBooks.getSelectedRow();

        //get the book id which is in the first column
        int bookID = (int) model.getValueAt(selectedRowIndex, 0);

        //check combobox for current user (one that is already selected)
        UserUnit curUser = (UserUnit) jComboBox_UserList.getSelectedItem();

        //addBookToBasket() SQL function adds a book from warehouse to users cart (basket)
        String SQL = "SELECT * FROM addBookToBasket (?,?)";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            //set (?) parameters to user id and book id
            pstmt.setInt(1, curUser.getId());
            pstmt.setInt(2, bookID);

            ResultSet rs = pstmt.executeQuery();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //refresh the list by reloading from database
        loadEverything();
    }//GEN-LAST:event_jMenuItem_AddToBasketActionPerformed

    //action handler (recieved MENU PRESS)
    private void jMenuItem_ReceivedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ReceivedActionPerformed

        //get the currently selected row from the model (table)        
        DefaultTableModel model = (DefaultTableModel) jTable_UserOrders.getModel();
        int selectedRowIndex = jTable_UserOrders.getSelectedRow();

        //get the order id which is in the first column
        int orderID = (int) model.getValueAt(selectedRowIndex, 0);

        //setOrderStatus() SQL function 'recieves' the order in database
        String SQL = "SELECT * FROM setOrderStatus (?,?)";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            //set (?) parameters to order id and 3=DELIVERED/RECIEVED
            pstmt.setInt(1, orderID);
            pstmt.setInt(2, 3);

            ResultSet rs = pstmt.executeQuery();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //refresh by loading from database
        loadEverything();
    }//GEN-LAST:event_jMenuItem_ReceivedActionPerformed

    //action handler (pay publisher MENU PRESS)
    private void jMenuItem_PayPublisherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_PayPublisherActionPerformed

        //get the currently selected row from the model (table) 
        DefaultTableModel model = (DefaultTableModel) jTable_AllOrders.getModel();
        int selectedRowIndex = jTable_AllOrders.getSelectedRow();

        //get the order id which is in the first column
        int theID = (int) model.getValueAt(selectedRowIndex, 0);

        //payPublisher() SQL function transfers money to publishers from book sales in database
        String SQL = "SELECT * FROM payPublisher (?)";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            //set (?) parameter
            pstmt.setInt(1, theID);

            ResultSet rs = pstmt.executeQuery();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //refresh by loading from database and clear textfields
        loadEverything();
        clearBookEditingFields();
    }//GEN-LAST:event_jMenuItem_PayPublisherActionPerformed

    //action handler (testing)
    private void jTabbedPane_ReportsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedPane_ReportsFocusGained
        loadAllBooks();
        loadAllBooksForSale();
        loadAllOrders();
    }//GEN-LAST:event_jTabbedPane_ReportsFocusGained

    //action handler (?)
    private void jPanel_UserMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel_UserMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel_UserMousePressed

    //action handler (popup)
    private void jTable_UserOrdersMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_UserOrdersMouseReleased
        if (evt.isPopupTrigger()) {
            showPopup_UserOrders(evt);
        }
    }//GEN-LAST:event_jTable_UserOrdersMouseReleased

    //action handler (popup)
    private void jTable_UserOrdersMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_UserOrdersMousePressed
        if (evt.isPopupTrigger()) {
            showPopup_UserOrders(evt);
        }
    }//GEN-LAST:event_jTable_UserOrdersMousePressed

    //action handler (textbox)
    private void jTextField_SearchBookByManyTokensKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_SearchBookByManyTokensKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchOnManyTokens();
        }
    }//GEN-LAST:event_jTextField_SearchBookByManyTokensKeyPressed

    //action handler (?)
    private void jButton_CheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CheckOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_CheckOutActionPerformed

    //action handler (checkout BUTTON PRESS)
    private void jButton_CheckOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_CheckOutMouseClicked

        //check if the shipping address was provided
        if (jTextField_Street.getText().isEmpty()
            || jTextField_City.getText().isEmpty()
            || jTextField_Province.getText().isEmpty()
            || jTextField_PostalCode.getText().isEmpty()) {

            //display popup to user
            DisplayMessageToUser.infoBox("A shipping address must be provided", "CHECKOUT ERROR");
            return;
        }

        //check if there is at least one item in the basket (if no, show different popup)
        if (jTable_Basket.getModel().getRowCount() == 0) {
            DisplayMessageToUser.infoBox("The Basket is empty", "CHECKOUT ERROR");
            return;
        }

        //check combobox for current user (one that is already selected)
        UserUnit curUser = (UserUnit) jComboBox_UserList.getSelectedItem();

        //createOrder() SQL query creates an order in the database
        String SQL = "SELECT * FROM createOrder (?, ?, ?, ?, ?)";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            //set (?) parameters, getting information from textfields
            pstmt.setInt(1, curUser.getId());
            pstmt.setString(2, jTextField_Street.getText());
            pstmt.setString(3, jTextField_City.getText());
            pstmt.setString(4, jTextField_Province.getText());
            pstmt.setString(5, jTextField_PostalCode.getText());

            ResultSet rs = pstmt.executeQuery();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //reset textfields, checkbox and refresh from database
        clearUserShipmentFields();
        jCheckBox_UseRegistrationAddress.setSelected(false);
        loadEverything();
    }//GEN-LAST:event_jButton_CheckOutMouseClicked

    //action handler (use registration address CHECKBOX)
    private void jCheckBox_UseRegistrationAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_UseRegistrationAddressActionPerformed

        //auto-fill shipping address with registration address
        //if checkbox is selected
        if (jCheckBox_UseRegistrationAddress.isSelected()) {
            getUserAddress(1); // 1=Registration
        } else {
            //clear the fields if checkbox becomes unselected at any time
            clearUserShipmentFields();
        }
    }//GEN-LAST:event_jCheckBox_UseRegistrationAddressActionPerformed

    //action handler (?)
    private void jButton_EmptyBasketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EmptyBasketActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_EmptyBasketActionPerformed

    //action handler (empty basket BUTTON PRESS)
    private void jButton_EmptyBasketMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_EmptyBasketMouseClicked

        //check combobox for current user (one that is already selected)
        UserUnit curUser = (UserUnit) jComboBox_UserList.getSelectedItem();

        //emptyBasket() SQL function empties the basket (returns books to stock)
        String SQL = "SELECT * FROM emptyBasket (?)";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            //set the (?) parameter
            pstmt.setInt(1, curUser.getId());

            ResultSet rs = pstmt.executeQuery();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //refresh by loading from database
        loadEverything();
    }//GEN-LAST:event_jButton_EmptyBasketMouseClicked

    //action handler (switching user in combo box)
    private void jComboBox_UserListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_UserListActionPerformed

        //get combobox and user
        JComboBox cmb = (JComboBox) evt.getSource();
        UserUnit cItem = (UserUnit) cmb.getSelectedItem();

        //check if user is registered or not
        enableOrDisableAddress(cItem.getRegisterFlag());

        //set basket and order to selected user
        clearUserShipmentFields();
        jCheckBox_UseRegistrationAddress.setSelected(false);
        loadBasket();
        loadUserOrders();
    }//GEN-LAST:event_jComboBox_UserListActionPerformed

    //action handler (?)
    private void jComboBox_UserListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_UserListItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_UserListItemStateChanged

    //action handler (popup)
    private void jTable_AvailableBooksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_AvailableBooksMouseReleased
        if (evt.isPopupTrigger()) {
            showPopup_AvailableBooks(evt);
        }
    }//GEN-LAST:event_jTable_AvailableBooksMouseReleased

    //action handler (popup)
    private void jTable_AvailableBooksMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_AvailableBooksMousePressed
        if (evt.isPopupTrigger()) {
            showPopup_AvailableBooks(evt);
        }
    }//GEN-LAST:event_jTable_AvailableBooksMousePressed

    //action handler (link enter key to search button)
    private void jButton_UserSearchOnManyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_UserSearchOnManyActionPerformed
        searchOnManyTokens();
    }//GEN-LAST:event_jButton_UserSearchOnManyActionPerformed

    //action handler (testing)
    private void jButton_SearchOrderResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_SearchOrderResetMouseClicked
        loadAllOrders();
    }//GEN-LAST:event_jButton_SearchOrderResetMouseClicked

    //action handler (search orders BUTTON PRESS)
    private void jButton_OrderSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_OrderSearchMouseClicked

        // get the search criteria from the combobox
        String selItem = jComboBox_OrderSearchCriteria.getSelectedItem().toString();

        //searchOrderByMany() SQL function searches database for an order based on selected criteria
        String SQL = "select * from searchOrderByMany(?,?)";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            //set (?) parameters, criteria and specified string
            //criteria: (tracking number, cust name, order id, order status)
            pstmt.setString(1, selItem);
            pstmt.setString(2, jTextField_OrderSearch.getText());

            ResultSet rs = pstmt.executeQuery();

            //build the model (table) and pass it back to the other model to display
            jTable_AllOrders.setModel(buildTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jButton_OrderSearchMouseClicked

    //action handler (popup)
    private void jTable_AllOrdersMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_AllOrdersMouseReleased
        if (evt.isPopupTrigger()) {
            showPopup_Orders(evt);
        }
    }//GEN-LAST:event_jTable_AllOrdersMouseReleased

    //action handler (popup)
    private void jTable_AllOrdersMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_AllOrdersMousePressed
        if (evt.isPopupTrigger()) {
            showPopup_Orders(evt);
        }
    }//GEN-LAST:event_jTable_AllOrdersMousePressed

    //action handler (update book BUTTON PRESS)
    private void jButton_UpdateBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_UpdateBookMouseClicked

        //updateBook() SQL function updates information about a book from database
        //textfields used as input for values
        String SQL = "SELECT * FROM updateBook ('"
        + jTextField_BookID.getText() + "', '"
        + jTextField_BookName.getText() + "', '"
        + jTextField_BookAuthor.getText() + "', '"
        + jTextField_BookPublisher.getText() + "', '"
        + jTextField_BookGenre.getText() + "', '"
        + jTextField_BookISBN.getText() + "', "
        + jFormattedTextField_BookPrice.getText() + ", "
        + jFormattedTextField_NoOfPages.getText() + ", "
        + jFormattedTextField_BookQuantity.getText() + ", "
        + jFormattedTextField_BookPublisherShare.getText() + ", "
        + jCheckBox_BookRetiredYN.isSelected() + ")";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            ResultSet rs = pstmt.executeQuery();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //refresh the list + clear textfields
        loadEverything();
        clearBookEditingFields();
        jButton_AddBook.setVisible(true);
        jButton_UpdateBook.setVisible(false);
    }//GEN-LAST:event_jButton_UpdateBookMouseClicked

    //action handler (?)
    private void jFormattedTextField_BookPublisherShareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextField_BookPublisherShareActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedTextField_BookPublisherShareActionPerformed

    //action handler (?)
    private void jFormattedTextField_BookQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextField_BookQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedTextField_BookQuantityActionPerformed

    //action handler (add book BUTTON PRESS)
    private void jButton_AddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddBookActionPerformed

        //createBook() SQL function adds a book into database
        //textfields used as input for the values
        String SQL = "SELECT * FROM createBook ('"
        + jTextField_BookName.getText() + "', '"
        + jTextField_BookAuthor.getText() + "', '"
        + jTextField_BookPublisher.getText() + "', '"
        + jTextField_BookGenre.getText() + "', '"
        + jTextField_BookISBN.getText() + "', "
        + jFormattedTextField_BookPrice.getText() + ", "
        + jFormattedTextField_NoOfPages.getText() + ", "
        + jFormattedTextField_BookQuantity.getText() + ", "
        + jFormattedTextField_BookPublisherShare.getText() + ", "
        + jCheckBox_BookRetiredYN.isSelected() + ")";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            ResultSet rs = pstmt.executeQuery();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //refresh the list by reloading from database and clear the textfields
        loadEverything();
        clearBookEditingFields();
    }//GEN-LAST:event_jButton_AddBookActionPerformed

    //action handler (?)
    private void jTextField_BookAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_BookAuthorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_BookAuthorActionPerformed

    //action handler (popup)
    private void jTable_AllBooksInWarehouseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_AllBooksInWarehouseMouseReleased
        if (evt.isPopupTrigger()) {
            showPopup_AllBooks(evt);
        }
    }//GEN-LAST:event_jTable_AllBooksInWarehouseMouseReleased

    //action handler (popup)
    private void jTable_AllBooksInWarehouseMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_AllBooksInWarehouseMousePressed
        if (evt.isPopupTrigger()) {
            showPopup_AllBooks(evt);
        }
    }//GEN-LAST:event_jTable_AllBooksInWarehouseMousePressed

    //action handler (sales by author BUTTON PRESS)
    private void jButton_authorSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_authorSaleActionPerformed
         
        //salesByAuthor() SQL function generates report of sales by author from database
        String SQL = "SELECT * FROM salesByAuthor ()";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            ResultSet rs = pstmt.executeQuery();

            //build the model (table) from rs and pass it to the other model
            jTable_Reports.setModel(buildTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jButton_authorSaleActionPerformed

    //action handler (sales by genre BUTTON PRESS)
    private void jButton_genreSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_genreSaleActionPerformed
        
        //salesByGenre() SQL function generates report of sales by genre from database
        String SQL = "SELECT * FROM salesByGenre ()";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            ResultSet rs = pstmt.executeQuery();

            //build the model (table) from rs and pass it to the other model
            jTable_Reports.setModel(buildTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jButton_genreSaleActionPerformed

    //action handler (expenditure vs sales BUTTON PRESS)
    private void jButton_expenditureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_expenditureActionPerformed
        
        //warehouseNetSales() SQL function generates report of net sales from database
        String SQL = "SELECT * FROM warehouseNetSales ()";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            ResultSet rs = pstmt.executeQuery();

            //build the model (table) from rs and pass it to the other model
            jTable_Reports.setModel(buildTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jButton_expenditureActionPerformed

    //pattern matching search (should be put directly in its own action handler)
    private void searchOnManyTokens() {

        //search_by_...() SQL function that searches for books on multiple fields
        String SQL = "SELECT * FROM search_by_author_book_publisher_genre (?)";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            //set (?) parameter getting info from textfield
            pstmt.setString(1, jTextField_SearchBookByManyTokens.getText());

            ResultSet rs = pstmt.executeQuery();

            //build the model (table) from rs and pass it to the other model to display
            jTable_AvailableBooks.setModel(buildTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    //clear the book update/create textfields
    private void clearBookEditingFields() {
        jTextField_BookID.setText("");
        jTextField_BookName.setText("");
        jTextField_BookAuthor.setText("");
        jTextField_BookPublisher.setText("");
        jTextField_BookGenre.setText("");
        jTextField_BookISBN.setText("");
        jFormattedTextField_BookPrice.setText("");
        jFormattedTextField_NoOfPages.setText("");
        jFormattedTextField_BookQuantity.setText("");
        jFormattedTextField_BookPublisherShare.setText("");
        jCheckBox_BookRetiredYN.setSelected(false);
    }

    //enable/disable the textfields (whether user is registered)
    private void enableOrDisableAddress(Boolean pFlag) {
        jTextField_Street.setEnabled(pFlag);
        jTextField_City.setEnabled(pFlag);
        jTextField_Province.setEnabled(pFlag);
        jTextField_PostalCode.setEnabled(pFlag);
        jButton_CheckOut.setEnabled(pFlag);
        jCheckBox_UseRegistrationAddress.setEnabled(pFlag);

    }

    //get the user address
    private void getUserAddress(int pAddressType) {

        //check combobox for current user (one that is already selected)
        UserUnit curUser = (UserUnit) jComboBox_UserList.getSelectedItem();

        //getUserAddress() SQL function gets users address from database
        String SQL = "SELECT * FROM getUserAddress (?,?)";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            //set (?) parameters, user id and address type
            pstmt.setInt(1, curUser.getId());
            pstmt.setInt(2, pAddressType);

            ResultSet rs = pstmt.executeQuery();

            //fill text fields with information returned
            while (rs.next()) {
                jTextField_Street.setText(rs.getString("Street"));
                jTextField_City.setText(rs.getString("City"));
                jTextField_Province.setText(rs.getString("Province"));
                jTextField_PostalCode.setText(rs.getString("Postal Code"));

            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }     
    }

    //action handler (menu positioning)
    private void showPopup_AllBooks(java.awt.event.MouseEvent e) {
        jPopupMenu_AllBooks.show(e.getComponent(),
                e.getX(), e.getY());
    }

    //action hander (menu positioning)
    private void showPopup_Orders(java.awt.event.MouseEvent evt) {
        jPopupMenu_Order.show(evt.getComponent(),
                evt.getX(), evt.getY());
    }

    //action handler (menu positioning)
    private void showPopup_AvailableBooks(java.awt.event.MouseEvent e) {
        jPopupMenu_AvailableBooks.show(e.getComponent(),
                e.getX(), e.getY());
    }

    //action handler (menu positioning)
    private void showPopup_Basket(java.awt.event.MouseEvent e) {
        jPopupMenu_Basket.show(e.getComponent(),
                e.getX(), e.getY());
    }

    //action hander (menu positioning)
    private void showPopup_UserOrders(java.awt.event.MouseEvent evt) {
        jPopupMenu_UserOrders.show(evt.getComponent(),
                evt.getX(), evt.getY());
    }

    //clears shipping address textfields
    private void clearUserShipmentFields() {
        jTextField_Street.setText("");
        jTextField_City.setText("");
        jTextField_Province.setText("");
        jTextField_PostalCode.setText("");
    }

    //load all books (regardless of quantity)
    private void loadAllBooks() {

        //listAllBooks() SQL function lists every book in the warehouse (database)
        //all books will be listed, even those that cannot be ordered
        String SQL = "SELECT * FROM listAllBooks ()";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            ResultSet rs = pstmt.executeQuery();

            //build the model (table) from rs and pass it to the other model
            jTable_AllBooksInWarehouse.setModel(buildTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    //load books available for purchase
    private void loadAllBooksForSale() {

        //listallbooksavailabletobuy() SQL function lists books available for purchase in database
        String SQL = "SELECT * FROM listallbooksavailabletobuy ()";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            ResultSet rs = pstmt.executeQuery();

            //build the model (table) from rs and pass it to the other model
            jTable_AvailableBooks.setModel(buildTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    //load all orders
    private void loadAllOrders() {

        //listAllOrders() SQL function lists all orders in the database
        String SQL = "SELECT * FROM listAllOrders ()";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            ResultSet rs = pstmt.executeQuery();

            //build the model (table) from rs and pass it to the other model
            jTable_AllOrders.setModel(buildTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    //load individual user order
    private void loadUserOrders() {

        //check combobox for current user (one that is already selected)
        UserUnit item = (UserUnit) jComboBox_UserList.getSelectedItem();

        //listUserOrders() lists the books on order for a certain user in database
        String SQL = "SELECT * FROM listUserOrders (?)";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            //set (?) parameter
            pstmt.setInt(1, item.getId());

            ResultSet rs = pstmt.executeQuery();

            //build the model (table) from rs and pass it to the other model
            jTable_UserOrders.setModel(buildTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    //load individual basket (cart)
    private void loadBasket() {

        //check combobox for current user (one that is already selected)
        UserUnit item = (UserUnit) jComboBox_UserList.getSelectedItem();

        //listBooksFromBasket() SQL function loads user's basket from database
        String SQL = "select * from listBooksInBasket(?)";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            //set (?) parameter
            pstmt.setInt(1, item.getId());

            ResultSet rs = pstmt.executeQuery();

            //build the model (table) from rs and pass it to the other model
            jTable_Basket.setModel(buildTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    //load publisher list
    private void loadPublishers() {

        //listPublishers() SQL function lists all publishers and their information from database
        String SQL = "select * from listPublishers()";

        try ( Connection conn = this.connect();  PreparedStatement pstmt = conn.prepareStatement(SQL)) {

            ResultSet rs = pstmt.executeQuery();

            //build the model (table) from rs and pass it to the other model
            jTable_Publisher.setModel(buildTableModel(rs));

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    //load everything at once
    private void loadEverything() {
        loadAllBooks();
        loadAllBooksForSale();
        loadAllOrders();
        loadBasket();
        loadUserOrders();
        loadPublishers();
    }

    //table model template (builds a model from result set)
    //this is needed as only models can be passed to the jTables
    public static DefaultTableModel buildTableModel(ResultSet rs)
            throws SQLException {

        ResultSetMetaData metaData = rs.getMetaData();

        // build names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }

        // fill in the data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }
        return new DefaultTableModel(data, columnNames);
    }

    //connection template
    private Connection connect() throws SQLException {
        return DriverManager.getConnection(url, user, password);
    }

    //main (display the form)
    public static void main(String args[]) {
        /* Set the Nimbus look and feel template */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TheMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TheMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TheMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TheMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TheMainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_AddressType;
    private javax.swing.JButton jButton_AddBook;
    private javax.swing.JButton jButton_CheckOut;
    private javax.swing.JButton jButton_EmptyBasket;
    private javax.swing.JButton jButton_OrderSearch;
    private javax.swing.JButton jButton_SearchOrderReset;
    private javax.swing.JButton jButton_UpdateBook;
    private javax.swing.JButton jButton_UserSearchOnMany;
    private javax.swing.JButton jButton_authorSale;
    private javax.swing.JButton jButton_expenditure;
    private javax.swing.JButton jButton_genreSale;
    private javax.swing.JCheckBox jCheckBox_BookRetiredYN;
    private javax.swing.JCheckBox jCheckBox_UseRegistrationAddress;
    private javax.swing.JComboBox<String> jComboBox_OrderSearchCriteria;
    private javax.swing.JComboBox<UserUnit> jComboBox_UserList;
    private javax.swing.JFormattedTextField jFormattedTextField_BookPrice;
    private javax.swing.JFormattedTextField jFormattedTextField_BookPublisherShare;
    private javax.swing.JFormattedTextField jFormattedTextField_BookQuantity;
    private javax.swing.JFormattedTextField jFormattedTextField_NoOfPages;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_UserList;
    private javax.swing.JMenuItem jMenuItem_AddToBasket;
    private javax.swing.JMenuItem jMenuItem_DeleteBook;
    private javax.swing.JMenuItem jMenuItem_PayPublisher;
    private javax.swing.JMenuItem jMenuItem_Received;
    private javax.swing.JMenuItem jMenuItem_RemoveFromBasket;
    private javax.swing.JMenuItem jMenuItem_ShipOrder;
    private javax.swing.JMenuItem jMenuItem_UpdateBook;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel_AddNewBook;
    private javax.swing.JPanel jPanel_Orders2;
    private javax.swing.JPanel jPanel_Publisher;
    private javax.swing.JPanel jPanel_User;
    private javax.swing.JPanel jPanel_UserBasket;
    private javax.swing.JPanel jPanel_Warehouse;
    private javax.swing.JPopupMenu jPopupMenu_AllBooks;
    private javax.swing.JPopupMenu jPopupMenu_AvailableBooks;
    private javax.swing.JPopupMenu jPopupMenu_Basket;
    private javax.swing.JPopupMenu jPopupMenu_Order;
    private javax.swing.JPopupMenu jPopupMenu_UserOrders;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane_Publisher;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane_Reports;
    private javax.swing.JTable jTable_AllBooksInWarehouse;
    private javax.swing.JTable jTable_AllOrders;
    private javax.swing.JTable jTable_AvailableBooks;
    private javax.swing.JTable jTable_Basket;
    private javax.swing.JTable jTable_Publisher;
    private javax.swing.JTable jTable_Reports;
    private javax.swing.JTable jTable_UserOrders;
    private javax.swing.JTextField jTextField_BookAuthor;
    private javax.swing.JTextField jTextField_BookGenre;
    private javax.swing.JTextField jTextField_BookID;
    private javax.swing.JTextField jTextField_BookISBN;
    private javax.swing.JTextField jTextField_BookName;
    private javax.swing.JTextField jTextField_BookPublisher;
    private javax.swing.JTextField jTextField_City;
    private javax.swing.JTextField jTextField_OrderSearch;
    private javax.swing.JTextField jTextField_PostalCode;
    private javax.swing.JTextField jTextField_Province;
    private javax.swing.JTextField jTextField_SearchBookByManyTokens;
    private javax.swing.JTextField jTextField_Street;
    // End of variables declaration//GEN-END:variables
}
